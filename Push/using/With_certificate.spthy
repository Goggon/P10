theory handshake
begin

builtins: hashing, diffie-hellman, symmetric-encryption, asymmetric-encryption, signing

functions: HKDFExpand/1, hmac/1, h1/1

macros: handshakeCryptoHeader() = </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>>,
        protocolVersion() = <'254', '253'>,
        LengthAndFragment(len, seq_number, frag_offset, frag_len) = </*length*/ len, /*message_seq*/ seq_number, /*fragment_offset*/ frag_offset, /*fragment_length*/ frag_len>

rule Reveal_DHExp:
  [ DHExp(~x, ~tid, $A) ] --[ RevDHExp(~x, ~tid, $A), Corrupt($A) ]-> [ Out(~x) ]

rule Reveal_LTK:
  [ !Ltk($A, ~ltk) ] --[ Corrupt($A) ]-> [ Out(~ltk) ]

rule Register_pk:
    [ Fr(~ltk) ]
  --[ Reg($A) ]->
    [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)), Out(pk(~ltk)) ]

rule ClientHello:
    let
        clienthello = 
          < /*ProtocolVersion*/ protocolVersion(), 
            /*Random32*/ ~crandom, 
            /*CipherSuite*/ $CipherSuits, 
            /*Extension*/ <
              /*ExtensionType*/ '51', 
              /*KeyshareClientHello*/ <
                /*KeyshareEntry*/ <'g', 'g'^~a>
              >
            >
          >

        DTLSHandshake = 
          <
            /*HandshakeType*/ '1', /*client_hello(1)*/
            LengthAndFragment('200', '0', '0', '200'),
            clienthello
          >

        DTLSPlaintext = 
          <
            DTLSHandshake
          >
    in
        [ Fr(~crandom),
          Fr(~a),
          Fr(~session_id) ]
      --[ Start($C, $S, 'client', ~session_id), /* We must make it a note that we are communicating with the server, so we can discard packages out of order*/ 
          Send($C, $S, 'CH', ~session_id)/*,
          DH(~session_id, $C, ~a)*/ ]->
        [ Out(<DTLSPlaintext, $C, $S>) /*clienthello plaintext*/,
          St_ClientHello($C, $S, ~a, ~session_id, ~crandom),
          ClientSessionHandshakeHistory(<$C, $S, <DTLSHandshake>>) /*We need to save the handshake context*/,
          DHExp(~a, ~session_id, $C) ]

// ServerHello
rule ServerHello:
let
  /********** INCOMMING **********/
    ClientDTLSHandshake = 
      <
        /*HandshakeType*/ '1', /*client_hello(1)*/
        LengthAndFragment('200', '0', '0', '200'),
        <
          /*ProtocolVersion*/ protocolVersion(), 
          /*Random32*/ crandom, 
          /*CipherSuite*/ $CipherSuits, 
          /*Extension*/ <
            <
              /*ExtensionType*/ '51', 
              /*KeyshareClientHello*/ <'g', ga>
            >
          >
        >
      >

    ClientDTLSPlaintext = 
      <
        ClientDTLSHandshake
      >
  /******************************/

  traffic_key = ga^~b

  /********** SERVERHELLO **********/
    serverhello = 
      <
        /*ProtocolVersion*/ protocolVersion(), 
        /*Random32*/ ~srandom, 
        /*CipherSuite*/ $CipherSuits, 
        /*Extension*/ <
          /*ExtensionType*/ '51', 
          /*KeyshareServerHello*/ <'g', 'g'^~b>
        >
      >

    DTLSHandshakeSH = 
      <
        /*HandshakeType*/ '2', /*server_hello(2)*/
        LengthAndFragment('300', '0', '0', '300'),
        serverhello
      >

    DTLSPlaintextSH = 
      <
        DTLSHandshakeSH
      >
  
  /******************************/

  /********** ENCRYPTEDEXTENSION **********/
    encrypted_extensions = 
      <
        /*Extension*/ <
            /*ExtensionType*/ '13', 
            /*EncryptedExtensions*/ 'encryptedExtensions'
        >
      >

    DTLSHandshakeEE = 
      <
        /*HandshakeType*/ '8', /*encrypted_extensions(8)*/
        LengthAndFragment('400', '0', '0', '400'), 
        encrypted_extensions
      >

    DTLSInnerPlaintextEE = 
      senc{<
        /*content*/ DTLSHandshakeEE, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >}traffic_key

    DTLSCipherTextEE = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextEE
      >
  /******************************/

  /********** SERVERCERTIFICATE **********/
    server_certificate = 
      <
        /*certificate_entry*/ 'serverCert'
      >
    
    DTLSHandshakeSC = 
      <
        /*HandshakeType*/ '11', /*certificate(11)*/
        LengthAndFragment('2000', '1', '0', '2000'),  
        server_certificate
      >

    DTLSInnerPlaintextSC = 
      senc{<
        /*content*/ DTLSHandshakeSC, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >}traffic_key

    DTLSCipherTextSC = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextSC
      >      
  /******************************/

  /********** SERVERCERTIFICATEVERIFY **********/
    certificate_verify = 
    <
      /*algorithm*/ $alg, 
      /*signature*/ sign(hmac(<h1(<ClientDTLSHandshake, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC>), 'serverCert'>), serverPrivateKey)
    >

    DTLSHandshakeCV = 
      <
        /*HandshakeType*/ '15', /*certificate_verify(15)*/
        LengthAndFragment('500', '2', '0', '500'), 
        certificate_verify
      >

    DTLSInnerPlaintextCV = 
      senc{<
        /*content*/ DTLSHandshakeCV, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >}traffic_key

    DTLSCipherTextCV = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextCV
      >
  /******************************/
  
  /********** SERVERFINISHED **********/
    finished_key =  HKDFExpand(<traffic_key, 'finished', 'Hash_length'>)

    server_finished = 
      <
        /*verify_data*/  hmac(<finished_key, 
                              h1(<ClientDTLSHandshake, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC, DTLSHandshakeCV>)>)
      >

    DTLSHandshakeSF = 
      <
        /*HandshakeType*/ '20', /*finished(20)*/
        LengthAndFragment('600', '3', '0', '600'), 
        server_finished
      >

    DTLSInnerPlaintextSF = 
      senc(<
            /*content*/ DTLSHandshakeSF, 
            /*zeros*/ <'0'>, 
            /*ContentType*/ '22'
          >, traffic_key)

    DTLSCipherTextSF = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextSF
      >
  /******************************/
    
in
    [ !Ltk($S, serverPrivateKey),
      In(<ClientDTLSPlaintext, $C, $S>) /*clienthello plaintext*/,
      Fr(~b),
      Fr(~srandom),
      Fr(~session_id) ]
  --[ Neq('g', ga),
      Neq(ga, traffic_key), /* Ensure gb is not DH_Neutral */
      Start($S, $C, 'server', ~session_id), /* We must make it a note that we are communicating with the client, so we can discard packages out of order*/ 
      Send($S, $C, 'SF', ~session_id),
      Nonce($S, ~session_id, <crandom, ~srandom>),
      Running($S, 'server', <ClientDTLSHandshake, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC, DTLSHandshakeCV>) /* Used to ensure peer authentication, if a client has accepted a servers indentity, then a server must have sent their identity on a session equal to the one sent by the client*/
      /*DHChan($C, 'client', ~session_id, 'g', ~b, ga, 'g'^~b, traffic_key),
      DH(~session_id, $S, ~b)*/ ]->
    [ Out(<DTLSPlaintextSH, $S, $C>) /*serverhello plaintext*/,
      Out(<DTLSCipherTextEE, $S, $C>) /*encryptedextensions encrypted*/,
      Out(<DTLSCipherTextSC, $S, $C>) /*servercertificate encrypted*/,
      Out(<DTLSCipherTextCV, $S, $C>) /*servercertificateverify encrypted*/,
      Out(<DTLSCipherTextSF, $S, $C>) /*server finished*/,
      Keys(<$S, $C, ~session_id, 'g'^~b, ga, ga^~b, finished_key>),
      ServerFinished(<$S, $C, server_finished, ~session_id, <crandom, ~srandom>>),
      DHExp(~b, ~session_id, $S) ]
    

//ClientFinished
rule ClientFinished:
  let
    traffic_key = gb^a

    /********** INCOMMING: SERVERHELLO **********/
    serverhello = 
      <
        /*ProtocolVersion*/ protocolVersion(), 
        /*Random32*/ srandom,  
        /*CipherSuite*/ $CipherSuits, 
        /*Extension*/ <
            /*ExtensionType*/ '51', 
            /*KeyshareServerHello*/ <'g', gb>
        >
      >
    
    DTLSHandshakeSH = 
      <
        /*HandshakeType*/ '2', /*server_hello(2)*/
        LengthAndFragment('300', '0', '0', '300'),
        serverhello
      >

    DTLSPlaintextSH = 
      <
        DTLSHandshakeSH
      >

      

    /********************************************/

    /********** INCOMMING: ENCRYPTEDEXTENSION **********/
    encrypted_extensions = 
      <
        /*Extension*/ <
            /*ExtensionType*/ '13', 
            /*EncryptedExtensions*/ 'encryptedExtensions'
        >
      >

    
    DTLSHandshakeEE = 
      <
        /*HandshakeType*/ '8', /*encrypted_extensions(8)*/
        LengthAndFragment('400', '0', '0', '400'), 
        encrypted_extensions
      >
      

    DTLSCipherTextEE = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ senc{<
          /*content*/ DTLSHandshakeEE, 
          /*zeros*/ <'0'>, 
          /*ContentType*/ '22'
        >}traffic_key
      >

    /********************************************/

    /********** INCOMMING: SERVERCERTIFICATE **********/
    server_certificate = 
    <
      /*certificate_entry*/ 'serverCert'
    >

    DTLSHandshakeSC = 
      <
        /*HandshakeType*/ '11', /*certificate(11)*/
        LengthAndFragment('2000', '1', '0', '2000'),  
        server_certificate
      >

    DTLSInnerPlaintextSC = 
      senc{<
        /*content*/ DTLSHandshakeSC, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >}traffic_key

    DTLSCipherTextSC = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextSC
      >

                  
    /******************************/

    /********** INCOMMING: SERVERCERTIFICATEVERIFY **********/
    certificate_verify = 
    <
      /*algorithm*/ $alg, 
      /*signature*/ serverSignature //hmac(<h1(<DTLSHandshake_CH, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC>), 'serverCert'>) 
    >

    DTLSHandshakeCV = 
      <
        /*HandshakeType*/ '15', /*certificate_verify(15)*/
        LengthAndFragment('500', '2', '0', '500'), 
        certificate_verify
      >

    DTLSInnerPlaintextCV = 
      senc{<
        /*content*/ DTLSHandshakeCV, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >}traffic_key

    DTLSCipherTextCV = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ DTLSInnerPlaintextCV
      >
    /******************************/

    /********** INCOMMING: SERVERFINISHED **********/
    ServerDTLSCipherTextSF = 
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ senc(<
          /*content*/ <
            /*HandshakeType*/ '20', /*finished(20)*/
            LengthAndFragment('600', '3', '0', '600'), 
            <
              /*verify_data*/ serverFinish
            >
          >, 
          /*zeros*/ <'0'>, 
          /*ContentType*/ '22'
        >, traffic_key)
      >
    /********************************************/

    /********** CLIENTFINISHED **********/
    finished_key =  HKDFExpand(<traffic_key, 'finished', 'Hash_length'>)

    client_finished = 
      <
        /*verify_data*/  hmac(<finished_key, 
                              h1(<DTLSHandshake_CH, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC, DTLSHandshakeCV>)>)
      >

    DTLSInnerPlaintext = 
      <
        /*content*/ <
          /*HandshakeType*/ '20', /*finished(20)*/
          LengthAndFragment('600', '0', '0', '600'), 
          client_finished
        >, 
        /*zeros*/ <'0', '0'>, 
        /*ContentType*/ '22'
      >
      
    DTLSCipherText =  
      <
        /*unified_hdr*/ handshakeCryptoHeader(), 
        /*encrypted_record*/ senc(DTLSInnerPlaintext, traffic_key)
      >
    /**********************************/
  in
    [ St_ClientHello($C, $S, a, session_id, crandom),
      !Pk($S, serverPublicKey),
      In(<DTLSPlaintextSH, $S, $C>) /*serverhello plaintext*/,
      In(<DTLSCipherTextEE, $S, $C>) /*encryptedextensions encrypted*/,
      In(<DTLSCipherTextSC, $S, $C>) /*servercertificate encrypted*/,
      In(<DTLSCipherTextCV, $S, $C>) /*servercertificateverify encrypted*/,
      In(<ServerDTLSCipherTextSF, $S, $C>), /*server finished*/
      ClientSessionHandshakeHistory(<$C, $S, <DTLSHandshake_CH>>) ]
  --[ HandshakeComplete($C, $S, 'client', session_id, traffic_key, <crandom, srandom>),
      SessionKey($C, $S, 'client', session_id, traffic_key, 'auth'),
      Nonce($C, session_id, <crandom, srandom>),
      CommitAuth($C, $S, 'client', <DTLSHandshake_CH, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC, DTLSHandshakeCV>), /* Used to ensure peer authentication, if a client has accepted a servers indentity, then a server must have sent their identity on a session equal to the one sent by the client*/
      Neq('g', gb),
      Neq(gb, traffic_key), /* Ensure gb is not DH_Neutral */
      Eq(client_finished, serverFinish),
      Eq(verify(serverSignature, hmac(<h1(<DTLSHandshake_CH, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC>), 'serverCert'>), serverPublicKey), true),
      Send($C, $S, 'CF', session_id)/*,
      DHChan($S, 'server', session_id, 'g', a, 'g'^a, gb, traffic_key)*/ ]->
    [ Out(<DTLSCipherText, $C, $S>) /*client finished*/ ]

rule Ack:
  let
    DTLSCipherText = <
                      /*unified_hdr*/ handshakeCryptoHeader(), 
                      /*encrypted_record*/ senc(<
                        /*content*/ <
                          /*HandshakeType*/ '20', /*finished(20)*/
                          LengthAndFragment('600', '0', '0', '600'), 
                          client_finished
                        >, 
                        /*zeros*/ <'0', '0'>, 
                        /*ContentType*/ '22'
                      >, traffic_key)
                    >
  in
    [ In(<DTLSCipherText, $C, $S>),
      Keys(<$S, $C, session_id, gb, ga, traffic_key, finished_key>),
      ServerFinished(<$S, $C, server_finished, session_id, nonce>) ]
  --[ Eq(client_finished, server_finished),
      HandshakeComplete($S, $C, 'server', session_id, traffic_key, nonce),
      SessionKey($S, $C, 'server', session_id, traffic_key, 'not_auth'),
      Send($S, $C, 'ACK', session_id) ]->
    []

    
restriction Equal:
"
  All x y #i.
    Eq(x, y) @ #i ==> x = y
"

restriction Not_equal:
"
  All x y #i.
    Neq(x, y) @ #i ==> not(x = y)
"
restriction Only_one_ltk_per_actor:
"
  All A #i #j.
    Reg(A) @ i & Reg(A) @ j ==> #i = #j
"
/*
restriction One_dh_per_x:
  "All tid tid2 x actor actor2 #i #j. 
    DH(tid, actor, x)@i & DH(tid2, actor2, x)@j ==> #i = #j"

restriction Cant_guess_DH_value:
  "
    All C S client_session_id server_session_id g x y gx gy gxy #i #j #r.
      DHChan(C, 'client', client_session_id, g, x, gx, gy, gxy) @ i & 
      DHChan(S, 'server', server_session_id, g, y, gx, gy, gxy) @ j &
      K(gxy) @ r
        ==> (Ex #p. RevDHExp(x, client_session_id, C) @ p & p < r) |
            (Ex #q. RevDHExp(y, server_session_id, S) @ q & q < r)
  "
*/
restriction DEBUG_Only_one_session_client:
"
  All a1 a2 a3 a4 sid1 sid2 #i #j. 
    Start(a1, a2, 'client', sid1) @ i & Start(a3, a4, 'client', sid2) @ j ==> #i = #j
"


/*restriction DEBUG_Only_one_session_server:
"
  All a1 a2 a3 a4 sid1 sid2 #i #j. 
    Start(a1, a2, 'server', sid1) @ i & Start(a3, a4, 'server', sid2) @ j ==> #i = #j
"*/

/* If two session has been started, then the first session must have been complete before the new one start   */
restriction R1_Only_one_session_per_pair_at_a_time:
"
  All actor1 actor2 role session_id1 session_id2 #i #j.
    Start(actor1, actor2, role, session_id1) @ i & Start(actor1, actor2, role, session_id2) @ j & i < j
      ==> Ex traffic_key nonce #k. HandshakeComplete(actor1, actor2, role, session_id1, traffic_key, nonce) @ k & k < j & i < k
"

/* Actors may not start a session with them self */
restriction R2_Dont_essablish_session_with_self:
"
  All actor1 actor2 role session_id #i.
    Start(actor1, actor2, role, session_id) @ #i & actor1 = actor2 ==> F
"

/* If a message type is send twich on the same session id, then it must happen at the same time (it has in fact only been send once) */
restriction R3_Dont_resend_messages:
"
  All actor1 actor2 msg_type session_id #i #j.
    Send(actor1, actor2, msg_type, session_id) @ #i & Send(actor1, actor2, msg_type, session_id) @ #j ==> #i = #j
"

/* Only look at cases where begined sessions has endded aswell */



// Reachability lemma
lemma L1_Reachability_with_both_actors:
  exists-trace
  "Ex C S client_session_id server_session_id traffic_key nonce #i #j #k #l. 
    Start(C, S, 'client', client_session_id) @ i & Start(S, C, 'server', server_session_id) @ j
    & HandshakeComplete(C, S, 'client', client_session_id, traffic_key, nonce) @ k & HandshakeComplete(S, C, 'server', server_session_id, traffic_key, nonce) @ l
    & not(Ex #p. Corrupt(C) @ p) 
    & not(Ex #q. Corrupt(S) @ q)
    & not(Ex #r. K(traffic_key) @ r)
  "

// ISSUE: The adversary can change the identifiers and troll the server
lemma H1_Establishing_the_same_session_keys:
"
  All C S client_session_id server_session_id keyC keyS nonce #i #j.
    HandshakeComplete(C, S, 'client', client_session_id, keyC, nonce) @ #i 
    & HandshakeComplete(S, C, 'server', server_session_id, keyS, nonce) @ #j
    & not(Ex #p. Corrupt(C) @ p) 
    & not(Ex #q. Corrupt(S) @ q)
      ==> keyC = keyS
"

lemma H2_Session_key_secrecy[reuse]:
"
  All actor peer role session_id key #i.
  SessionKey(actor, peer, role, session_id, key, 'auth') @ i 
    & not(Ex #p. Corrupt(actor) @ p) 
    & not(Ex #q. Corrupt(peer) @ q) 
     ==>
       not(Ex #j. K(key) @ j)
"

/* If the client has accepted authentication from the server, then the server must have sent their identity on a trace with equal handshake history*/
/* ISSUE: We cant be sure on C and S... */
lemma H3_Authentication[reuse]:
"
  All C S HandshakeHistory #i.
    CommitAuth(C, S, 'client', HandshakeHistory) @ i
    & not(Ex #p. Corrupt(C) @ p) 
    & not(Ex #q. Corrupt(S) @ q)
      ==> (Ex #r. Running(S, 'server', HandshakeHistory) @ r)
"

// ISSUE: The adversary can change the identifiers and troll the server
lemma H4_Unique_session_keys[reuse]:
"
  All actor1 actor2 peer1 peer2 role key session_id1 session_id2 auth1 auth2 #i #j.
    SessionKey(actor1, peer1, role, session_id1, key, auth1) @ i & SessionKey(actor2, peer2, role, session_id2, key, auth2) @ j
      ==>
        #i = #j
        | (Ex #p. Corrupt(actor1) @ p)
        | (Ex #q. Corrupt(actor2) @ q)
        | (Ex #p. Corrupt(peer1) @ p)
        | (Ex #q. Corrupt(peer2) @ q)
"

lemma H6_Forward_secrecy[reuse]:
"
All C S session_id key nonce #i #j.
  HandshakeComplete(C, S, 'client', session_id, key, nonce) @ i 
  & HandshakeComplete(S, C, 'server', session_id, key, nonce) @ j
  & ((Ex #p. Corrupt(C) @ p & #j < #p) 
  | (Ex #q. Corrupt(S) @ q & #j < #q))
  & not((Ex #k. K(key) @ k & #k < #j))
  ==>
    not((Ex #k. K(key) @ k))
"

end