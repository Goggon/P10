theory record_layer
begin

builtins: hashing, diffie-hellman, symmetric-encryption, asymmetric-encryption, signing, natural-numbers

functions: HKDFExpand/1, hmac/1, h1/1

/* Channel rules */
rule Secure_Chan:
    [ S_Out(m) ]
  --[ ]->
    [ S_In(m) ]

rule ClientAppAck:
  [ Fr(client_session_id),
    Fr(server_session_id),
    Fr(session_key),
    Fr(~data), Fr(~len) ]
--[ Start(),
    SendMsg($C, $S, ~data, session_key, ~len) ]->
  [ S_Out(senc(<~data, ~len>, session_key)),
    !ClientSessionKeySend($C, $S, client_session_id, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, session_key),
    !ServerSessionKeySend($S, $C, server_session_id, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, session_key),
    !ClientSessionKeyRec($C, $S, client_session_id, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, session_key),
    !ServerSessionKeyRec($S, $C, server_session_id, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, session_key),
    ClientSeqAndEpochAPP(client_session_id, 1:nat, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, 1:nat, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat),
    ServerSeqAndEpochAPP(server_session_id, 1:nat, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat, 1:nat, 1:nat %+ 1:nat %+ 1:nat %+ 1:nat) ]
        
rule ServerApp:
    [ !ServerSessionKeySend($S, $C, session_id, %next_epoch, session_key_send),
      !ServerSessionKeyRec($S, $C, session_id, %rec_epoch, session_key_rec),
      ServerSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch),
      S_In(senc(<$S, $C, inc_data, inc_len, %rec_seq, %rec_epoch>, session_key_rec)),
      Fr(~data), Fr(~len) ]
  --[ ReceivedMsg($S, $C, inc_data, session_key_rec, inc_len),
      SendMsg($S, $C, ~data, session_key_send, ~len) ]->
    [ ServerSeqAndEpochAPP(session_id, %next_seq %+ 1:nat, %next_epoch, %rec_seq %+ 1:nat, %rec_epoch),
      S_Out(senc(<~data, ~len, %next_seq, %next_epoch>, session_key_send)) ]

rule ClientApp:
    [ !ClientSessionKeySend($C, $S, session_id, %next_epoch, session_key_send),
      !ClientSessionKeyRec($C, $S, client_session_id, %rec_epoch, session_key_rec),
      ClientSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch),
      S_In(senc(<$C, $S, inc_data, inc_len, %rec_seq, %rec_epoch>, session_key_rec)),
      Fr(~data), Fr(~len) ]
  --[ ReceivedMsg($C, $S, inc_data, session_key_rec, inc_len),
      SendMsg($C, $S, ~data, session_key_send, ~len) ]->
    [ ClientSeqAndEpochAPP(session_id, %next_seq %+ 1:nat, %next_epoch, %rec_seq %+ 1:nat, %rec_epoch),
      S_Out(senc(<~data, ~len, %next_seq, %next_epoch>, session_key_send)) ]

rule ClientUpdateKey:
  let
    DTLSCipherText =
      <
      /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %next_epoch>, 
        /*encrypted_record*/ senc(<
          /*content*/ <
            /*HandshakeType*/ '24', /*key_update(24)*/
            <~len, %next_seq, 1:nat, 1:nat>, 
            <'1'>
          >, 
          /*zeros*/ <'0'>, 
          /*ContentType*/ '22'
        >, session_key_send)
      >
  in
    [ Fr(~len),
      !ClientSessionKeySend($C, $S, session_id, %next_epoch, session_key_send),
      ClientSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch) ]
  --[  ]->
    [ S_Out(DTLSCipherText),
      ClientSeqAndEpochAPP(session_id, %next_seq %+ 1:nat, %next_epoch, %rec_seq, %rec_epoch) ]
  
rule ServerUpdateKeyRec:
  let
    /************ INCOMMING: KEYUPDATE *************/
    new_session_key = HKDFExpand(session_key_rec, 'traffic_upd', 'Hash_length')

    key_update = 
      <
        /*KeyUpdateRequest*/ '1' /*update_requested(1)*/
      >

    DTLSCipherText =
      <
      /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %rec_epoch>, 
        /*encrypted_record*/ senc(<
          /*content*/ <
            /*HandshakeType*/ '24', /*key_update(24)*/
            <lenKU, %rec_seq, 1:nat, 1:nat>, 
            key_update
          >, 
          /*zeros*/ <'0'>, 
          /*ContentType*/ '22'
        >, session_key_rec)
      >
    /**************************************/
    
    /******** ACK **********/
    DTLSCipherTextACK = 
      <
        /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %next_epoch>,
        /*encrypted_record*/ senc(<
          /*content*/ <'ACK'>, 
          /*zeros*/ <'0', '0'>, 
          /*ContentType*/ '26'
        >, session_key_send)
      >
    /***********************/
    
  in
    [ Fr(~len),
      !ServerSessionKeySend($S, $C, session_id, %next_epoch, session_key_send),
      !ServerSessionKeyRec($S, $C, session_id, %rec_epoch, session_key_rec),
      ServerSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch),
      S_In(DTLSCipherText) ]
  --[ /*RegisterSessionkey(new_session_key)*/ ]->
    [ S_Out(DTLSCipherTextACK),
      ServerSeqAndEpochAPP(session_id, %next_seq, %next_epoch, 1:nat, %rec_epoch %+ 1:nat),
      !ServerSessionKeyRec($S, $C, session_id, %rec_epoch %+ 1:nat, new_session_key) ]

rule ClientRecACK:
  let
    new_session_key = HKDFExpand(session_key_send, 'traffic_upd', 'Hash_length')

    /******** INCOMMING: ACK **********/
    DTLSCipherTextACK = 
      <
        /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %rec_epoch>,
        /*encrypted_record*/ senc(<
          /*content*/ <'ACK'>, 
          /*zeros*/ <'0', '0'>, 
          /*ContentType*/ '26'
        >, session_key_rec)
      >
    /***********************/
  in
    [ S_In(DTLSCipherTextACK),
      !ClientSessionKeySend($C, $S, session_id, %next_epoch, session_key_send),
      !ClientSessionKeyRec($C, $S, client_session_id, %rec_epoch, session_key_rec),
      ClientSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch) ]
  --[ RegisterSessionkey(new_session_key) ]->
    [ !ClientSessionKeySend($C, $S, session_id, %next_epoch %+ 1:nat, new_session_key),
      ClientSeqAndEpochAPP(session_id, 1:nat, %next_epoch %+ 1:nat, %rec_seq, %rec_epoch) ]


rule ServerUpdateKey:
  let
    /************ KEYUPDATE RESPONSE *************/
    DTLSCipherText =
    <
    /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %next_epoch>, 
      /*encrypted_record*/ senc(<
        /*content*/ <
          /*HandshakeType*/ '24', /*key_update(24)*/
          <~len, %next_seq, 1:nat, 1:nat>, 
          <'0'>
        >, 
        /*zeros*/ <'0'>, 
        /*ContentType*/ '22'
      >, session_key_send)
    >
    /**************************************/
    
  in
    [ Fr(~len),
      !ServerSessionKeySend($C, $S, session_id, %next_epoch, session_key_send),
      ServerSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch) ]
  --[  ]->
    [ S_Out(DTLSCipherText),
      ServerSeqAndEpochAPP(session_id, %next_seq %+ 1:nat, %next_epoch, %rec_seq, %rec_epoch) ]

rule ClientUpdateKeyRec:
  let
      new_session_key = HKDFExpand(session_key_rec, 'traffic_upd', 'Hash_length')

      /************ INCOMMING: KEYUPDATE RESPONSE *************/
      DTLSCipherTextKR =
      <
      /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %rec_epoch>, 
        /*encrypted_record*/ senc(<
          /*content*/ <
            /*HandshakeType*/ '24', /*key_update(24)*/
            <~len, %rec_seq, 1:nat, 1:nat>, 
            <'0'>
          >, 
          /*zeros*/ <'0'>, 
          /*ContentType*/ '22'
        >, session_key_rec)
      >
    /**************************************/

    /******** ACK **********/
    DTLSCipherTextACK = 
      <
        /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %next_epoch>,
        /*encrypted_record*/ senc(<
          /*content*/ <'ACK'>, 
          /*zeros*/ <'0', '0'>, 
          /*ContentType*/ '26'
        >, session_key_send)
      >
    /***********************/
  in
    [ Fr(~len),
      !ClientSessionKeySend($S, $C, session_id, %next_epoch, session_key_send),
      !ClientSessionKeyRec($S, $C, session_id, %rec_epoch, session_key_rec),
      ClientSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch),
      S_In(DTLSCipherText) ]
  --[  ]->
    [ ClientSeqAndEpochAPP(session_id, %next_seq %+ 1:nat, %next_epoch, 1:nat, %rec_epoch %+ 1:nat),
      !ClientSessionKeyRec($S, $C, session_id, %rec_epoch %+ 1:nat, new_session_key) ]

rule ServerRecACK:
    let
      new_session_key = HKDFExpand(session_key_send, 'traffic_upd', 'Hash_length')
  
      /******** INCOMMING: ACK **********/
      DTLSCipherTextACK = 
        <
          /*unified_hdr*/ </*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ %rec_epoch>,
          /*encrypted_record*/ senc(<
            /*content*/ <'ACK'>, 
            /*zeros*/ <'0', '0'>, 
            /*ContentType*/ '26'
          >, session_key_rec)
        >
      /***********************/
    in
      [ S_In(DTLSCipherTextACK),
        !ServerSessionKeyRec($C, $S, client_session_id, %rec_epoch, session_key_rec),
        !ServerSessionKeySend($C, $S, session_id, %next_epoch %+ 1:nat, session_key_send),
        ServerSeqAndEpochAPP(session_id, %next_seq, %next_epoch, %rec_seq, %rec_epoch) ]
    --[ RegisterSessionkey(new_session_key) ]->
      [ !ServerSessionKeySend($C, $S, session_id, %next_epoch %+ 1:nat, new_session_key),
        ServerSeqAndEpochAPP(session_id, 1:nat, %next_epoch %+ 1:nat, %rec_seq, %rec_epoch) ]

lemma Reachability:
exists-trace
"
  Ex session_key #i.
    RegisterSessionkey(session_key) @ i
"

lemma R1_Confidentiality:
"
  All actor1 actor2 msg session_key len #i #j.
    SendMsg(actor1, actor2, msg, session_key, len) @ i & K(msg) @ j ==> Ex #l. K(session_key) @ l 
"
    
lemma R2_Integrity:
"
  All actor1 actor2 msg session_key len #i.
    ReceivedMsg(actor1, actor2, msg, session_key, len) @ i & not(Ex #l. K(session_key) @ l & #l < #i) 
      ==> Ex #j. SendMsg(actor2, actor1, msg, session_key, len) @ j & #j < #i
"
    
lemma R3_Length_concealment:
"
  All actor1 actor2 msg session_key len #i.
    SendMsg(actor1, actor2, msg, session_key, len) @ i ==> not(Ex #j. K(len) @ j)
"

lemma R4_Forward_Secrecy:
"
  All actor1 actor2 msg_old session_key_old session_key_new len #i #j.
    SendMsg(actor1, actor2, msg_old, session_key_old, len) @ i
    & not(Ex #k. K(msg_old) @ k & #k < #j)
    & RegisterSessionkey(session_key_new) @ j
    & #i < #j
      ==> not(Ex #l. K(msg_old) @ l)
"

end