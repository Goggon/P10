// insert relevant imports

// HelloRetryRequest
rule HelloRetryRequest:
    let
        hello_retry_request = {/*ProtocolVersion*/ {254, 253}, /*Random32*/ {random}, /*legacy_session_id*/ [], /*CipherSuite*/ [{CipherSuite_name, two_byte_id}], /*legacy_compression_method*/ 0, /*Extension*/ {/*ExtensionType*/ 51, /*KeyshareHelloRetryRequest*/ {name_of_method, [key_exchange, ...]}, {/*ExtensionType*/ 44, /*Cookie*/ {cookie_that_depend_on_client_address}}}}
        DTLSHandshake = {/*length*/ random, /*message_seq*/ 0, /*fragment_offset*/ 0, /*fragment_length*/ length, hello_retry_request}
        DTLSPlaintext = {/*epoch*/ 0, /*sequence_number*/ 0, /*length*/ DTLSHandshake length+x, DTLSHandshake}
    in
    [  ]
    --[  ]->
    [Out(DTLSPlaintext)]


// ServerHello
rule ServerHello:
    let
        serverhello = {/*ProtocolVersion*/ {254, 253}, /*Random32*/ {random}, /*legacy_session_id_echo*/ [], /*CipherSuite*/ [{CipherSuite_name, two_byte_id}], /*legacy_compression_method*/ 0, /*Extension*/ {/*ExtensionType*/ 51, /*KeyshareHelloRetryRequest*/ {name_of_method, [key_exchange, ...]}}}
        DTLSHandshake = {/*length*/ random, /*message_seq*/ 0, /*fragment_offset*/ 0, /*fragment_length*/ length, server_hello}
        DTLSPlaintext = {/*epoch*/ 0, /*sequence_number*/ 0, /*length*/ DTLSHandshake length+x, DTLSHandshake}
    in
    [  ]
    --[  ]->
    [Out(DTLSPlaintext)]