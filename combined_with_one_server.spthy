theory handshake
begin

builtins: hashing, symmetric-encryption, diffie-hellman, asymmetric-encryption, signing

//predicates: DH(g, gx) <=> Ex x. g^x = gx
functions: HKDF/1, HKDFExpand/1, HKDFExpand1/1, HKDFExpand2/1, hmac/1, mac/1, checksign/2, h1/1


rule Reveal_DHExp:
  [ DHExp(~x, ~tid, $A) ] --[ RevDHExp(~x, ~tid, $A), Corrupt($A) ]-> [ Out(~x) ]

rule ClientHello:
    let
        clienthello = < /*ProtocolVersion*/ <'254', '253'>, 
                        /*Random32*/ ~random, 
                        /*CipherSuite*/ $CipherSuits, 
                        /*Extension*/ <
                          /*ExtensionType*/ '51', 
                          /*KeyshareClientHello*/ <
                            /*KeyshareEntry*/ <'g', 'g'^~a>
                          >
                        >
                      >
        DTLSHandshake = <
                          /*length*/ '200',
                          /*message_seq*/ '0', 
                          /*fragment_offset*/ '0', 
                          /*fragment_length*/ '200', 
                          clienthello
                        >
        DTLSPlaintext = <
                          /*epoch*/ '0', 
                          /*sequence_number*/ '0', 
                          /*length*/ '210', 
                          DTLSHandshake
                        >
    in
        [ Fr(~random),
          Fr(~a),
          Fr(~session_id) ]
      --[ Start($C, $S, 'client', ~session_id), /* We must make it a note that we are communicating with the server, so we can discard packages out of order*/ 
          Send($C, $S, 'CH', ~session_id),
          DH(~session_id, $C, ~a) ]->
        [ Out(<DTLSPlaintext, $C, $S>) /*clienthello plaintext*/,
          St_ClientHello($C, $S, ~random, ~a, ~session_id),
          ClientSessionHandshakeHistory(<$C, $S, <DTLSHandshake>>) /*We need to save the handshake context*/,
          DHExp(~a, ~session_id, $C) ]

// ServerHello
rule ServerHello:
let
    traffic_key = ga^~b

    serverhello = <
                    /*ProtocolVersion*/ <'254', '253'>, 
                    /*Random32*/ ~random, 
                    /*CipherSuite*/ $CipherSuits, 
                    /*Extension*/ <
                        /*ExtensionType*/ '51', 
                        /*KeyshareServerHello*/ <'g', 'g'^~b>
                    >
                >
    DTLSHandshakeSH = <
                    /*length*/ '200', 
                    /*message_seq*/ '0', 
                    /*fragment_offset*/ '0', 
                    /*fragment_length*/ '200', 
                    serverhello
                >

    DTLSPlaintextSH = <
                    /*epoch*/ '0', 
                    /*sequence_number*/ '0', 
                    /*length*/ '210', 
                    DTLSHandshakeSH
                >

                encrypted_extensions = <
                /*Extension*/ <
                    /*ExtensionType*/ '13', 
                    /*EncryptedExtensions*/ $EncryptedExtensions
                >
              >

    DTLSHandshakeEE = <
                        /*length*/ '400', 
                        /*message_seq*/ '0', 
                        /*fragment_offset*/ '0', 
                        /*fragment_length*/ '400', 
                        encrypted_extensions
                      >

    DTLSInnerPlaintextEE = senc{<
                              /*content*/ DTLSHandshakeEE, 
                              /*zeros*/ <'0'>, 
                              /*ContentType*/ '22'
                          >}traffic_key

    DTLSCipherTextEE = </*unified_hdr*/ 
                        <
                          /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'> 
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintextEE
                      >

                      server_certificate = <
                      /*certificate_entry*/ $ServerCert
                  >

    DTLSHandshakeSC = <
                      /*length*/ '2000', 
                      /*message_seq*/ '1', 
                      /*fragment_offset*/ '0', 
                      /*fragment_length*/ '2000', 
                      server_certificate
                      >

    DTLSInnerPlaintextSC = senc{<
                          /*content*/ DTLSHandshakeSC, 
                          /*zeros*/ <'0'>, 
                          /*ContentType*/ '22'
                      >}traffic_key

    DTLSCipherTextSC = <
                      /*unified_hdr*/ <
                          /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*L*/ '1', /*S*/ '1', /*E*/ <'1','0'>
                      >, 
                      /*encrypted_record*/ DTLSInnerPlaintextSC
                  >

                  certificate_verify = <
                  /*algorithm*/ $alg, 
                  /*signature*/ $signature //Transcript-Hash(Handshake Context, Certificate) /* TODO */
              >

    DTLSHandshakeCV = <
                      /*length*/ '500', 
                      /*message_seq*/ '2', 
                      /*fragment_offset*/ '0', 
                      /*fragment_length*/ '500', 
                      certificate_verify
                    >
    DTLSInnerPlaintextCV = senc{<
                          /*content*/ DTLSHandshakeCV, 
                          /*zeros*/ <'0'>, 
                          /*ContentType*/ '22'
                        >}traffic_key

    DTLSCipherTextCV = <
                        /*unified_hdr*/ <
                            /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintextCV
                      >

    ClientDTLSHandshake = <
                            /*length*/ rec_messageLength, 
                            /*message_seq*/ '0', 
                            /*fragment_offset*/ rec_fragmentOffset, 
                            /*fragment_length*/ rec_fragmentLength, 
                            <
                              /*ProtocolVersion*/ <'254', '253'>, 
                              /*Random32*/ rec_clientRandom, 
                              /*CipherSuite*/ $CipherSuits, 
                              /*Extension*/ <
                                <
                                  /*ExtensionType*/ '51', 
                                  /*KeyshareClientHello*/ <'g', ga>
                                >
                              >
                            >
                          >

    ClientDTLSPlaintext = <
                            /*epoch*/ '0', 
                            /*sequence_number*/ '0', 
                            /*length*/ rec_recordLength,
                            ClientDTLSHandshake
                          >
    
    finished_key =  HKDFExpand(<traffic_key, 'finished', 'Hash_length'>)

    server_finished = <
                        /*verify_data*/  hmac(<finished_key, 
                                              h1(<ClientDTLSHandshake, DTLSHandshakeSH, DTLSHandshakeEE, DTLSHandshakeSC, DTLSHandshakeCV>)>)
                      >
    DTLSHandshakeSF = <
                        /*length*/ '400', 
                        /*message_seq*/ '0', 
                        /*fragment_offset*/ '0', 
                        /*fragment_length*/ '400', 
                        server_finished
                    >
    DTLSInnerPlaintextSF = senc{<
                            /*content*/ DTLSHandshakeSF, 
                            /*zeros*/ <'0'>, 
                            /*ContentType*/ '22'
                        >}traffic_key
    DTLSCipherTextSF = <
                        /*unified_hdr*/ <
                            /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*E*/ <'1','0'>
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintextSF
                    >
in
    [ Fr(~b),
      Fr(~random),
      Fr(~session_id),
      In(<ClientDTLSPlaintext, $C, $C>) /*clienthellocookie plaintext*/ ]
  --[ Neq('g', ga),
      Start($S, $C, 'server', ~session_id), /* We must make it a note that we are communicating with the client, so we can discard packages out of order*/ 
      Send($S, $C, 'SF', ~session_id),
      DHChan($C, 'client', ~session_id, 'g', ~b, ga, 'g'^~b, traffic_key),
      DH(~session_id, $S, ~b) ]->
    [ Out(<DTLSPlaintextSH, $S, $C>) /*serverhello plaintext*/,
      Out(<DTLSCipherTextEE, $S, $C>) /*encrypted extensions*/,
      Out(<DTLSCipherTextSC, $S, $C>) /*server certificate*/,
      Out(<DTLSCipherTextCV, $S, $C>) /*certificate verify*/,
      Out(<DTLSCipherTextSF, $S, $C>) /*server finished*/,
      Keys(<$S, $C, 'g'^~b, ga, ga^~b>),
      ServerFinished(<$S, $C, server_finished, ~session_id>),
      DHExp(~b, ~session_id, $S) ]
    

//ClientFinished
rule ClientFinished:
    let
        traffic_key = gb^a

        finished_key =  HKDFExpand(<traffic_key, 'finished', 'Hash_length'>)

        client_finished = <
                            /*verify_data*/  hmac(<finished_key, 
                                                  h1(<DTLSPlaintext_CH, <
                                                    /*length*/ rec_SHMessageLength, 
                                                    /*message_seq*/ '0', 
                                                    /*fragment_offset*/ rec_SHfragmentOffset, 
                                                    /*fragment_length*/ rec_SHfragmentLength, 
                                                    <
                                                      /*ProtocolVersion*/ <'254', '253'>, 
                                                      /*Random32*/ rec_serverRandom, 
                                                      /*CipherSuite*/ $CipherSuits, 
                                                      /*Extension*/ <
                                                        /*ExtensionType*/ '51', 
                                                        /*KeyshareServerHello*/ <'g', gb>
                                                      >
                                                    >
                                                  >, ServerDTLSHandshakeEE, ServerDTLSHandshakeSC, ServerDTLSHandshakeSCV>)>)
                          >

        DTLSHandshake = <
                          /*length*/ '300', 
                          /*message_seq*/ '4', 
                          /*fragment_offset*/ '0', 
                          /*fragment_length*/ '300', 
                          client_finished
                        >

        DTLSInnerPlaintext = <
                                /*content*/ DTLSHandshake, 
                                /*zeros*/ <'0'>, 
                                /*ContentType*/ '22'
                            >
        DTLSCipherText =  <
                            /*unified_hdr*/ <
                              /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*E*/ <'1','0'>
                            >, 
                            /*encrypted_record*/ senc{DTLSInnerPlaintext}traffic_key
                          >

        /* INCOMMING MESSAGE */
        ServerDTLSPlaintext = <
                                /*epoch*/ '0', 
                                /*sequence_number*/ '0', 
                                /*length*/ rec_SHRecordLength, 
                                <
                                  /*length*/ rec_SHMessageLength, 
                                  /*message_seq*/ '0', 
                                  /*fragment_offset*/ rec_SHfragmentOffset, 
                                  /*fragment_length*/ rec_SHfragmentLength, 
                                  <
                                    /*ProtocolVersion*/ <'254', '253'>, 
                                    /*Random32*/ rec_serverRandom, 
                                    /*CipherSuite*/ $CipherSuits, 
                                    /*Extension*/ <
                                      /*ExtensionType*/ '51', 
                                      /*KeyshareServerHello*/ <'g', gb>
                                    >
                                  >
                                >
                              >
    

        ServerDTLSCipherTextEE = </*unified_hdr*/ 
                                  <
                                  /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'> //<- Expect epoch = 2 
                                  >, 
                                  /*encrypted_record*/ senc{<
                                    /*content*/ ServerDTLSHandshakeEE, 
                                    /*zeros*/ <'0'>, 
                                    /*ContentType*/ '22'
                                  >}traffic_key
                                >

        ServerDTLSHandshakeEE = <
                                  /*length*/ rec_EELength, 
                                  /*message_seq*/ '0', 
                                  /*fragment_offset*/ rec_EEFragmentOffset, 
                                  /*fragment_length*/ rec_EEFragmentLength, 
                                  <
                                    /*Extension*/ <
                                      /*ExtensionType*/ '13', 
                                      /*EncryptedExtensions*/ $EncryptedExtensions
                                    >
                                  >
                                >

        ServerDTLSCipherTextSC = <
                                  /*unified_hdr*/ <
                                    /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*L*/ '1', /*S*/ '1', /*E*/ <'1','0'>
                                  >, 
                                  /*encrypted_record*/ senc{<
                                    /*content*/ ServerDTLSHandshakeSC, 
                                    /*zeros*/ <'0'>, 
                                    /*ContentType*/ '22'
                                  >}traffic_key
                                >

        ServerDTLSHandshakeSC = <
                                /*length*/ rec_SCMessageLength, 
                                /*message_seq*/ '1', 
                                /*fragment_offset*/ rec_SCFragmentOffset, 
                                /*fragment_length*/ rec_SCFragmentLength, 
                                <
                                  /*certificate_entry*/ $ServerCert
                                >
                              >

        ServerDTLSCipherTextSCV = <
                                    /*unified_hdr*/ <
                                      /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                                    >, 
                                    /*encrypted_record*/ senc{<
                                      /*content*/ ServerDTLSHandshakeSCV, 
                                      /*zeros*/ <'0'>, 
                                      /*ContentType*/ '22'
                                    >}traffic_key
                                  >

        ServerDTLSHandshakeSCV = <
                                  /*length*/ rec_SCVMessageLength, 
                                  /*message_seq*/ '2', 
                                  /*fragment_offset*/ rec_SCVFragmentOffset, 
                                  /*fragment_length*/ rec_SCVFragmentLength, 
                                  <
                                    /*algorithm*/ $alg, 
                                    /*signature*/ signature /* TODO */
                                  >
                                >

        ServerDTLSCipherTextSF = <
                                  /*unified_hdr*/ <
                                    /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                                  >, 
                                  /*encrypted_record*/ senc{<
                                    /*content*/ <
                                      /*length*/ rec_SFMessageLength, 
                                      /*message_seq*/ '3', 
                                      /*fragment_offset*/ rec_SFFragmentOffset, 
                                      /*fragment_length*/ rec_SFFragmentLength, 
                                      <
                                        /*verify_data*/ serverFinish
                                      >
                                    >, 
                                    /*zeros*/ <'0'>, 
                                    /*ContentType*/ '22'
                                  >}traffic_key
                                >

    in
        [ St_ClientHello($C, $S, random, a, session_id),
          In(<ServerDTLSPlaintext, $S, $C>) /*serverhello plaintext*/,
          In(<ServerDTLSCipherTextEE, $S, $C>) /*encrypted extensions*/,
          In(<ServerDTLSCipherTextSC, $S, $C>) /*server certificate*/,
          In(<ServerDTLSCipherTextSCV, $S, $C>) /*server certificate verify*/,
          In(<ServerDTLSCipherTextSF, $S, $C>), /*server finished*/
          ClientSessionHandshakeHistory(<$C, $S, <DTLSPlaintext_CH>>) ]
      --[ HandshakeComplete($C, $S, session_id, traffic_key),
          Neq('g', gb),
          Eq(client_finished, serverFinish),
          Send($C, $S, 'CF', session_id),
          DHChan($S, 'server', session_id, 'g', a, 'g'^a, gb, traffic_key) ]->
        [ Out(<DTLSCipherText, $C, $S>) /*client finished*/]

rule Ack:
  let
    DTLSCipherText = <
                      /*unified_hdr*/ <
                        /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*E*/ <'1','0'>
                      >, 
                      /*encrypted_record*/ senc{<
                        /*content*/ <
                          /*length*/ '300', 
                          /*message_seq*/ '4', 
                          /*fragment_offset*/ '0', 
                          /*fragment_length*/ '300', 
                          client_finished
                        >, 
                        /*zeros*/ <'0'>, 
                        /*ContentType*/ '22'
                      >}traffic_key
                    >
  in
    [ In(<DTLSCipherText, $C, $S>),
      Keys(<$S, $C, gb, ga, traffic_key>),
      ServerFinished(<$S, $C, server_finished, session_id>) ]
  --[ Eq(client_finished, server_finished),
      HandshakeComplete($S, $C, session_id, traffic_key),
      Send($S, $C, 'ACK', session_id) ]->
    []

    
restriction Equal:
"
  All x y #i.
    Eq(x, y) @ #i ==> x = y
"

restriction Not_equal:
"
  All x y #i.
    Neq(x, y) @ #i ==> not(x = y)
"


restriction One_dh_per_x:
  "All tid tid2 x actor actor2 #i #j. 
    DH(tid, actor, x)@i & DH(tid2, actor2, x)@j ==> #i = #j"

restriction Cant_guess_DH_value:
  "
    All C S client_session_id server_session_id g x y gx gy gxy #i #j #r.
      DHChan(C, 'client', client_session_id, g, x, gx, gy, gxy) @ i & 
      DHChan(S, 'server', server_session_id, g, y, gx, gy, gxy) @ j &
      K(gxy) @ r
        ==> (Ex #p. RevDHExp(x, client_session_id, C) @ p & p < r) |
            (Ex #q. RevDHExp(y, server_session_id, S) @ q & q < r)
  "

restriction DEBUG_Only_one_session_client:
"
  All a1 a2 a3 a4 sid1 sid2 #i #j. 
    Start(a1, a2, 'client', sid1) @ i & Start(a3, a4, 'client', sid2) @ j ==> #i = #j
"

restriction DEBUG_Only_one_session_server:
"
  All a1 a2 a3 a4 sid1 sid2 #i #j. 
    Start(a1, a2, 'server', sid1) @ i & Start(a3, a4, 'server', sid2) @ j ==> #i = #j
"

/* If two session has been started, then the first session must have been complete before the new one start   */
restriction R1_Only_one_session_per_pair_at_a_time:
"
  All actor1 actor2 role session_id1 session_id2 #i #j.
    Start(actor1, actor2, role, session_id1) @ i & Start(actor1, actor2, role, session_id2) @ j & i < j
      ==> Ex traffic_key #k. HandshakeComplete(actor1, actor2, session_id1, traffic_key) @ k & k < j & i < k
"

/* Actors may not start a session with them self */
restriction R2_Dont_essablish_session_with_self:
"
  All actor1 actor2 role session_id #i.
    Start(actor1, actor2, role, session_id) @ #i & actor1 = actor2 ==> F
"

/* If a message type is send twich on the same session id, then it must happen at the same time (it has in fact only been send once) */
restriction R3_Dont_resend_messages:
"
  All actor1 actor2 msg_type session_id #i #j.
    Send(actor1, actor2, msg_type, session_id) @ #i & Send(actor1, actor2, msg_type, session_id) @ #j ==> #i = #j
"

// Reachability lemma
lemma L1_reachability_with_both_actors:
  exists-trace
  "Ex C S client_session_id server_session_id traffic_key #i #j #k #l. 
    Start(C, S, 'client', client_session_id) @ i & Start(S, C, 'server', server_session_id) @ j
    & HandshakeComplete(C, S, client_session_id, traffic_key) @ k & HandshakeComplete(S, C, server_session_id, traffic_key) @ l
    & not((Ex #p. Corrupt(C) @ p & p < l)) 
    & not((Ex #q. Corrupt(S) @ q & q < l))
    & not((Ex #r. !KU(traffic_key) @ r & r < l))
  "

end