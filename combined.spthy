theory handshake
begin

builtins: hashing, symmetric-encryption, diffie-hellman, asymmetric-encryption, signing

//predicates: DH(g, gx) <=> Ex x. g^x = gx
//functions: HKDF/1, HKDFExpand/1, HKDFExpand1/1, HKDFExpand2/1, hmac/1, mac/1, checksign/2


rule ClientHello:
    let
        clienthello = < /*ProtocolVersion*/ <'254', '253'>, 
                        /*Random32*/ ~random, 
                        /*CipherSuite*/ $CipherSuits, 
                        /*Extension*/ <
                          /*ExtensionType*/ '51', 
                          /*KeyshareClientHello*/ <
                            /*KeyshareEntry*/ <'g', 'g'^~a>
                          >
                        >
                      >
        DTLSHandshake = <
                          /*length*/ '200',
                          /*message_seq*/ '0', 
                          /*fragment_offset*/ '0', 
                          /*fragment_length*/ '200', 
                          clienthello
                        >
        DTLSPlaintext = <
                          /*epoch*/ '0', 
                          /*sequence_number*/ '0', 
                          /*length*/ '210', 
                          DTLSHandshake
                        >
    in
        [ Fr(~random),
          Fr(~a) ]
      --[ ]->
        [ Out(<DTLSPlaintext, $C, $S>) /*clienthello plaintext*/,
          St_ClientHello($C, $S, ~random, ~a) ]

// ServerHello
rule ServerHello:
let
    serverhello = <
                    /*ProtocolVersion*/ <'254', '253'>, 
                    /*Random32*/ ~random, 
                    /*CipherSuite*/ $CipherSuits, 
                    /*Extension*/ <
                        /*ExtensionType*/ '51', 
                        /*KeyshareServerHello*/ <'g', 'g'^~b>
                    >
                >
    DTLSHandshake = <
                    /*length*/ '200', 
                    /*message_seq*/ '0', 
                    /*fragment_offset*/ '0', 
                    /*fragment_length*/ '200', 
                    serverhello
                >

    DTLSPlaintext = <
                    /*epoch*/ '0', 
                    /*sequence_number*/ '0', 
                    /*length*/ '210', 
                    DTLSHandshake
                >

    ClientDTLSPlaintext = <
                            /*epoch*/ '0', 
                            /*sequence_number*/ '0', 
                            /*length*/ rec_recordLength, 
                            <
                                /*length*/ rec_messageLength, 
                                /*message_seq*/ '0', 
                                /*fragment_offset*/ rec_fragmentOffset, 
                                /*fragment_length*/ rec_fragmentLength, 
                                <
                                    /*ProtocolVersion*/ <'254', '253'>, 
                                    /*Random32*/ rec_clientRandom, 
                                    /*CipherSuite*/ $CipherSuits, 
                                    /*Extension*/ <
                                        <
                                            /*ExtensionType*/ '51', 
                                            /*KeyshareClientHello*/ <'g', ga>
                                        >
                                    >
                                >
                            >
                        >
    
in
    [ Fr(~b),
      Fr(~random),
      In(<ClientDTLSPlaintext, $C, $C>) /*clienthellocookie plaintext*/ ]
  --[ Neq('g', ga) ]->
    [ Out(<DTLSPlaintext, $S, $C>) /*serverhello plaintext*/,
      St_server_sends_hello($S, $C, ga^~b, ~random, rec_clientRandom, 'Server_sent_hello_to_client_Send_encrypted_extensions'),
      Keys('g'^~b, ga) ]


// EncryptedExtensions
rule EncryptedExtensions:
let
    encrypted_extensions = <
                            /*Extension*/ <
                                /*ExtensionType*/ '13', 
                                /*EncryptedExtensions*/ $EncryptedExtensions
                            >
                          >

    DTLSHandshake = <
                        /*length*/ '400', 
                        /*message_seq*/ '0', 
                        /*fragment_offset*/ '0', 
                        /*fragment_length*/ '400', 
                        encrypted_extensions
                    >

    DTLSInnerPlaintext = senc{<
                            /*content*/ DTLSHandshake, 
                            /*zeros*/ <'0'>, 
                            /*ContentType*/ '22'
                        >}traffic_key

    DTLSCipherText = </*unified_hdr*/ 
                        <
                          /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'> 
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintext
                    >
    
in
  [ St_server_sends_hello($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_hello_to_client_Send_encrypted_extensions') ]
--[  ]->
  [ Out(<DTLSCipherText, $S, $C>) /*encrypted extensions*/,
    St_server_sends_encrypted_extensions($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_encrypted_extensions_to_client_Send_certificate_request') ]


// ServerCertificate
rule ServerCertificate:
let
    server_certificate = <
                            /*certificate_entry*/ $ServerCert
                        >

    DTLSHandshake = <
                    /*length*/ '2000', 
                    /*message_seq*/ '1', 
                    /*fragment_offset*/ '0', 
                    /*fragment_length*/ '2000', 
                    server_certificate
                    >
    DTLSInnerPlaintext = senc{<
                            /*content*/ DTLSHandshake, 
                            /*zeros*/ <'0'>, 
                            /*ContentType*/ '22'
                        >}traffic_key

    DTLSCipherText = <
                        /*unified_hdr*/ <
                            /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*L*/ '1', /*S*/ '1', /*E*/ <'1','0'>
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintext
                    >
    
in
    [ St_server_sends_encrypted_extensions($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_encrypted_extensions_to_client_Send_certificate_request') ]
  --[  ]->
    [ Out(<DTLSCipherText, $S, $C>) /*server certificate*/,
      St_server_sends_server_certificate($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_server_certificate_to_client_Send_server_certificate_verify') ]


// CertificateVerify
rule CertificateVerify:
let
    certificate_verify = <
                            /*algorithm*/ $alg, 
                            /*signature*/ $signature //Transcript-Hash(Handshake Context, Certificate) /* TODO */
                        >

    DTLSHandshake = <
                        /*length*/ '500', 
                        /*message_seq*/ '2', 
                        /*fragment_offset*/ '0', 
                        /*fragment_length*/ '500', 
                        certificate_verify
                    >
    DTLSInnerPlaintext = senc{<
                            /*content*/ DTLSHandshake, 
                            /*zeros*/ <'0'>, 
                            /*ContentType*/ '22'
                        >}traffic_key

    DTLSCipherText = <
                        /*unified_hdr*/ <
                            /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintext
                    >
    
in
[St_server_sends_server_certificate($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_server_certificate_to_client_Send_server_certificate_verify')]
--[  ]->
[Out(<DTLSCipherText, $S, $C>) /*certificate verify*/,
 St_server_sends_certificate_verify($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_certificate_verify_to_client_Send_server_finished')]


// ServerFinished
rule ServerFinished:
let
    server_finished = <
                        /*verify_data*/ traffic_key /*TODO */ /*HMAC(HKDF-Expand-Label(
                                                                Transcript-Hash(Handshake Context, ServerCertificate), "finished", "", 12), 
                                                                Transcript-Hash(Handshake Context, CertificateVerify))*/
                    >
    DTLSHandshake = <
                        /*length*/ '400', 
                        /*message_seq*/ '0', 
                        /*fragment_offset*/ '0', 
                        /*fragment_length*/ '400', 
                        server_finished
                    >
    DTLSInnerPlaintext = senc{<
                            /*content*/ DTLSHandshake, 
                            /*zeros*/ <'0'>, 
                            /*ContentType*/ '22'
                        >}traffic_key
    DTLSCipherText = <
                        /*unified_hdr*/ <
                            /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*E*/ <'1','0'>
                        >, 
                        /*encrypted_record*/ DTLSInnerPlaintext
                    >
    
in
    [ St_server_sends_certificate_verify($S, $C, traffic_key, random, rec_clientRandom, 'Server_sent_certificate_verify_to_client_Send_server_finished'),
      Keys(gb, ga) ]
  --[ FinishedS($S, $C, gb, ga, traffic_key) ]->
    [ Out(<DTLSCipherText, $S, $C>) /*server finished*/ ]
    

//ClientFinished
rule ClientFinished:
    let
        traffic_key = gb^a
        client_finished = <
                            /*verify_data*/ traffic_key /*TODO*/ //HMAC(HKDF-Expand-Label(BaseKey, "finished", "", Hash.length))
                          >

        DTLSHandshake = <
                          /*length*/ '300', 
                          /*message_seq*/ '4', 
                          /*fragment_offset*/ '0', 
                          /*fragment_length*/ '300', 
                          client_finished
                        >

        DTLSInnerPlaintext = <
                                /*content*/ DTLSHandshake, 
                                /*zeros*/ <'0'>, 
                                /*ContentType*/ '22'
                            >
        DTLSCipherText =  <
                            /*unified_hdr*/ <
                              /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*E*/ <'1','0'>
                            >, 
                            /*encrypted_record*/ DTLSInnerPlaintext
                          >

        /* INCOMMING MESSAGE */
        ServerDTLSPlaintext = <
                                /*epoch*/ '0', 
                                /*sequence_number*/ '0', 
                                /*length*/ rec_SHRecordLength, 
                                <
                                  /*length*/ rec_SHMessageLength, 
                                  /*message_seq*/ '0', 
                                  /*fragment_offset*/ rec_SHfragmentOffset, 
                                  /*fragment_length*/ rec_SHfragmentLength, 
                                  <
                                    /*ProtocolVersion*/ <'254', '253'>, 
                                    /*Random32*/ rec_serverRandom, 
                                    /*CipherSuite*/ $CipherSuits, 
                                    /*Extension*/ <
                                      /*ExtensionType*/ '51', 
                                      /*KeyshareServerHello*/ <'g', gb>
                                    >
                                  >
                                >
                              >

        ServerDTLSCipherTextEE = </*unified_hdr*/ 
                                  <
                                  /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'> //<- Expect epoch = 2 
                                  >, 
                                  /*encrypted_record*/ senc{<
                                    /*content*/ <
                                      /*length*/ rec_EELength, 
                                      /*message_seq*/ '0', 
                                      /*fragment_offset*/ rec_EEFragmentOffset, 
                                      /*fragment_length*/ rec_EEFragmentLength, 
                                      <
                                        /*Extension*/ <
                                            /*ExtensionType*/ '13', 
                                            /*EncryptedExtensions*/ $EncryptedExtensions
                                        >
                                      >
                                    >, 
                                    /*zeros*/ <'0'>, 
                                    /*ContentType*/ '22'
                                  >}traffic_key
                                >

        ServerDTLSCipherTextSC = <
                                  /*unified_hdr*/ <
                                    /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*L*/ '1', /*S*/ '1', /*E*/ <'1','0'>
                                  >, 
                                  /*encrypted_record*/ senc{<
                                    /*content*/ <
                                      /*length*/ rec_SCMessageLength, 
                                      /*message_seq*/ '1', 
                                      /*fragment_offset*/ rec_SCFragmentOffset, 
                                      /*fragment_length*/ rec_SCFragmentLength, 
                                      <
                                        /*certificate_entry*/ $ServerCert
                                      >
                                    >, 
                                    /*zeros*/ <'0'>, 
                                    /*ContentType*/ '22'
                                  >}traffic_key
                                >
          ServerDTLSCipherTextSCV = <
                                      /*unified_hdr*/ <
                                        /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                                      >, 
                                      /*encrypted_record*/ senc{<
                                        /*content*/ <
                                          /*length*/ rec_SCVMessageLength, 
                                          /*message_seq*/ 2, 
                                          /*fragment_offset*/ rec_SCVFragmentOffset, 
                                          /*fragment_length*/ rec_SCVFragmentLength, 
                                          <
                                            /*algorithm*/ $alg, 
                                            /*signature*/ signature /* TODO */
                                          >
                                        >, 
                                        /*zeros*/ <'0'>, 
                                        /*ContentType*/ '22'
                                      >}traffic_key
                                    >
            ServerDTLSCipherTextSF = <
                                      /*unified_hdr*/ <
                                        /*first three bits*/ <'0','0','1'>, /*C*/ '0', /*S*/ '1', /*L*/ '1', /*E*/ <'1','0'>
                                      >, 
                                      /*encrypted_record*/ senc{<
                                        /*content*/ <
                                          /*length*/ rec_SFMessageLength, 
                                          /*message_seq*/ 3, 
                                          /*fragment_offset*/ rec_SFFragmentOffset, 
                                          /*fragment_length*/ rec_SFFragmentLength, 
                                          <
                                            /*verify_data*/ serverFinish
                                          >
                                        >, 
                                        /*zeros*/ <'0'>, 
                                        /*ContentType*/ '22'
                                      >}traffic_key
                                    >
    in
        [ St_ClientHello($C, $S, random, a),
          In(<ServerDTLSPlaintext, $S, $C>) /*serverhello plaintext*/,
          In(<ServerDTLSCipherTextEE, $S, $C>) /*encrypted extensions*/,
          In(<ServerDTLSCipherTextSC, $S, $C>) /*server certificate*/,
          In(<ServerDTLSCipherTextSCV, $S, $C>) /*server certificate verify*/,
          In(<ServerDTLSCipherTextSF, $S, $C>) /*server finished*/ ]
      --[ FinishedC($C, $S, 'g'^a, gb, traffic_key),
          Neq('g', gb) ]->
        [ /*Out(<DTLSCipherText, $C>)*/ /*client finished*/]

/*
restriction DH_in_group:
"
  All g gx #i.
  CheckDHInGroup(g, gx) @ #i ==> DH(g, gx)
"
*/

restriction Not_equal:
"
  All x y #i.
  Neq(x, y) @ #i ==> not(x = y)
"

lemma Establishing_the_same_session_keys:
"
  All C S gc gs keyC keyS #i #j.
    FinishedC(C, S, gc, gs, keyC) @ #i & FinishedS(S, C, gs, gc, keyS) @ #j ==>  keyC = keyS
"

end